import org.gradle.internal.jvm.Jvm

repositories {
    mavenCentral()
}

apply plugin: 'java-library'

if ( !hasProperty( 'buildNumber' ) ) {
    ext.buildNumber = defaultBuildNumber
}
version = "$baseVersion.$buildNumber"

println ''
println '>>>'
println "Gradle version: ${project.getGradle().gradleVersion}"
println "Java version: ${Jvm.current()}"
println '>>>'
println ''

def vertxVersion = "4.1.3"
def es4xVersion = "0.15.0"
def junitVersion = "5.7.2"
def junitPlatformVersion = "1.7.2"
def graalVmVersion = "21.2.0"
dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.26'
    implementation "io.vertx:vertx-core:$vertxVersion"
    implementation "io.reactiverse:es4x:$es4xVersion"

    runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    runtimeOnly 'ch.qos.logback:logback-core:1.2.3'
    runtimeOnly "org.graalvm.sdk:graal-sdk:$graalVmVersion"
    runtimeOnly "org.graalvm.truffle:truffle-api:$graalVmVersion"
    runtimeOnly "org.graalvm.js:js:$graalVmVersion"
    runtimeOnly "org.graalvm.tools:profiler:$graalVmVersion"
    runtimeOnly "org.graalvm.tools:chromeinspector:$graalVmVersion"
    runtimeOnly "org.graalvm.compiler:compiler:$graalVmVersion"
    runtimeOnly "org.graalvm.compiler:compiler-management:$graalVmVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.vintage:junit-vintage-engine:$junitVersion"
    testImplementation "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    testImplementation "org.junit.platform:junit-platform-runner:$junitPlatformVersion"
    testImplementation "io.vertx:vertx-unit:$vertxVersion"
    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testImplementation 'org.assertj:assertj-core:3.20.2'
}

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType(Test).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

def paths = [:]
configurations.runtimeClasspath.files.each {
    if ( it.path.endsWith("graal-sdk-${graalVmVersion}.jar") ) {
        paths['sdk'] = it.path
    } else if ( it.path.endsWith( "truffle-api-${graalVmVersion}.jar" ) ) {
        paths['truffle'] = it.path
    } else if ( it.path.endsWith( "compiler-${graalVmVersion}.jar" ) ) {
        paths['compiler'] = it.path
    } else if ( it.path.endsWith( "compiler-management-${graalVmVersion}.jar" ) ) {
        paths['management'] = it.path
    }
}

test {
    useJUnitPlatform()
    jvmArgs = ['-XX:+UnlockExperimentalVMOptions', '-XX:+EnableJVMCI', "--module-path=${paths['sdk']}", "--upgrade-module-path=${paths['compiler']};${paths['management']};${paths['truffle']}"]
}
